// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct OverlayConfig {
  var tintColor: String? = nil
  var topIcon: FlutterStandardTypedData? = nil
  var iconSwipeLeft: FlutterStandardTypedData? = nil
  var iconSwipeRight: FlutterStandardTypedData? = nil
  var iconTap: FlutterStandardTypedData? = nil
  var iconTapToggled: FlutterStandardTypedData? = nil

  static func fromList(_ list: [Any?]) -> OverlayConfig? {
    let tintColor: String? = nilOrValue(list[0])
    let topIcon: FlutterStandardTypedData? = nilOrValue(list[1])
    let iconSwipeLeft: FlutterStandardTypedData? = nilOrValue(list[2])
    let iconSwipeRight: FlutterStandardTypedData? = nilOrValue(list[3])
    let iconTap: FlutterStandardTypedData? = nilOrValue(list[4])
    let iconTapToggled: FlutterStandardTypedData? = nilOrValue(list[5])

    return OverlayConfig(
      tintColor: tintColor,
      topIcon: topIcon,
      iconSwipeLeft: iconSwipeLeft,
      iconSwipeRight: iconSwipeRight,
      iconTap: iconTap,
      iconTapToggled: iconTapToggled
    )
  }
  func toList() -> [Any?] {
    return [
      tintColor,
      topIcon,
      iconSwipeLeft,
      iconSwipeRight,
      iconTap,
      iconTapToggled,
    ]
  }
}
/// Gesturedeck
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol GesturedeckFlutter {
  func initialize(activationKey: String?, autoStart: Bool) throws
  func start() throws
  func stop() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class GesturedeckFlutterSetup {
  /// The codec used by GesturedeckFlutter.
  /// Sets up an instance of `GesturedeckFlutter` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: GesturedeckFlutter?) {
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckFlutter.initialize", binaryMessenger: binaryMessenger)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let activationKeyArg: String? = nilOrValue(args[0])
        let autoStartArg = args[1] as! Bool
        do {
          try api.initialize(activationKey: activationKeyArg, autoStart: autoStartArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let startChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckFlutter.start", binaryMessenger: binaryMessenger)
    if let api = api {
      startChannel.setMessageHandler { _, reply in
        do {
          try api.start()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startChannel.setMessageHandler(nil)
    }
    let stopChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckFlutter.stop", binaryMessenger: binaryMessenger)
    if let api = api {
      stopChannel.setMessageHandler { _, reply in
        do {
          try api.stop()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopChannel.setMessageHandler(nil)
    }
  }
}
private class GesturedeckMediaFlutterCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return OverlayConfig.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class GesturedeckMediaFlutterCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? OverlayConfig {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class GesturedeckMediaFlutterCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return GesturedeckMediaFlutterCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return GesturedeckMediaFlutterCodecWriter(data: data)
  }
}

class GesturedeckMediaFlutterCodec: FlutterStandardMessageCodec {
  static let shared = GesturedeckMediaFlutterCodec(readerWriter: GesturedeckMediaFlutterCodecReaderWriter())
}

/// GesturedeckMedia
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol GesturedeckMediaFlutter {
  func initialize(activationKey: String?, autoStart: Bool, reverseHorizontalSwipes: Bool, overlayConfig: OverlayConfig?) throws
  func start() throws
  func stop() throws
  func dispose() throws
  func reverseHorizontalSwipes(value: Bool) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class GesturedeckMediaFlutterSetup {
  /// The codec used by GesturedeckMediaFlutter.
  static var codec: FlutterStandardMessageCodec { GesturedeckMediaFlutterCodec.shared }
  /// Sets up an instance of `GesturedeckMediaFlutter` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: GesturedeckMediaFlutter?) {
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckMediaFlutter.initialize", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let activationKeyArg: String? = nilOrValue(args[0])
        let autoStartArg = args[1] as! Bool
        let reverseHorizontalSwipesArg = args[2] as! Bool
        let overlayConfigArg: OverlayConfig? = nilOrValue(args[3])
        do {
          try api.initialize(activationKey: activationKeyArg, autoStart: autoStartArg, reverseHorizontalSwipes: reverseHorizontalSwipesArg, overlayConfig: overlayConfigArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let startChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckMediaFlutter.start", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startChannel.setMessageHandler { _, reply in
        do {
          try api.start()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startChannel.setMessageHandler(nil)
    }
    let stopChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckMediaFlutter.stop", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopChannel.setMessageHandler { _, reply in
        do {
          try api.stop()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopChannel.setMessageHandler(nil)
    }
    let disposeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckMediaFlutter.dispose", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disposeChannel.setMessageHandler { _, reply in
        do {
          try api.dispose()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disposeChannel.setMessageHandler(nil)
    }
    let reverseHorizontalSwipesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckMediaFlutter.reverseHorizontalSwipes", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      reverseHorizontalSwipesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let valueArg = args[0] as! Bool
        do {
          try api.reverseHorizontalSwipes(value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      reverseHorizontalSwipesChannel.setMessageHandler(nil)
    }
  }
}
/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class GesturedeckCallback {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  func onTap(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckCallback.onTap", binaryMessenger: binaryMessenger)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  func onSwipeLeft(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckCallback.onSwipeLeft", binaryMessenger: binaryMessenger)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  func onSwipeRight(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckCallback.onSwipeRight", binaryMessenger: binaryMessenger)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  func onPan(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckCallback.onPan", binaryMessenger: binaryMessenger)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  func onLongPress(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckCallback.onLongPress", binaryMessenger: binaryMessenger)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
}
/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class GesturedeckMediaCallback {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  func onTap(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckMediaCallback.onTap", binaryMessenger: binaryMessenger)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  func onSwipeLeft(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckMediaCallback.onSwipeLeft", binaryMessenger: binaryMessenger)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  func onSwipeRight(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckMediaCallback.onSwipeRight", binaryMessenger: binaryMessenger)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  func onPan(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckMediaCallback.onPan", binaryMessenger: binaryMessenger)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  func onLongPress(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gesturedeck_flutter.GesturedeckMediaCallback.onLongPress", binaryMessenger: binaryMessenger)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
}
