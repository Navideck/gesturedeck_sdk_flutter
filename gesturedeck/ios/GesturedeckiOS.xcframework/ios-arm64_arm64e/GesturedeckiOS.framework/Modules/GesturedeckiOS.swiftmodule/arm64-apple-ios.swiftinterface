// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GesturedeckiOS
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AudioToolbox
import CoreHaptics
import MediaPlayer
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public enum InsomniaMode {
  case disabled
  case always
  case whenCharging
  public static func == (a: GesturedeckiOS.InsomniaMode, b: GesturedeckiOS.InsomniaMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol BatteryStateReporting : AnyObject {
  var batteryStateHandler: ((_ isPlugged: Swift.Bool) -> Swift.Void)? { get set }
}
public protocol InsomniaModeHaving {
  var mode: GesturedeckiOS.InsomniaMode { get set }
}
final public class Insomnia : GesturedeckiOS.BatteryStateReporting, GesturedeckiOS.InsomniaModeHaving {
  final public var mode: GesturedeckiOS.InsomniaMode {
    get
    set
  }
  final public var batteryStateHandler: ((_ isPlugged: Swift.Bool) -> Swift.Void)? {
    get
    set
  }
  public init(mode: GesturedeckiOS.InsomniaMode, device: UIKit.UIDevice = UIDevice.current, notificationCenter: Foundation.NotificationCenter = NotificationCenter.default, application: UIKit.UIApplication = UIApplication.shared)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class Gesturedeck : ObjectiveC.NSObject, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) public var tapAction: ((@escaping (Swift.Bool) -> Swift.Void) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var swipeLeftAction: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var swipeRightAction: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var strokeColor: CoreGraphics.CGColor
  @_Concurrency.MainActor(unsafe) public var volumeIcon: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var pauseIcon: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var playIcon: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var swipeLeftIcon: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var swipeRightIcon: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public init(on hostViewController: UIKit.UIViewController? = nil, tapAction: (((Swift.Bool) -> Swift.Void) -> Swift.Void)? = { callback in
                    var isHighlighted = false
                    if MPMusicPlayerController.systemMusicPlayer.playbackState == .playing {
                    MPMusicPlayerController.systemMusicPlayer.pause()
                        isHighlighted = false
                    } else if MPMusicPlayerController.systemMusicPlayer.playbackState == .paused {
                        MPMusicPlayerController.systemMusicPlayer.play()
                        isHighlighted = true
                    } else if AVAudioSession.sharedInstance().isOtherAudioPlaying {
                        try! AVAudioSession.sharedInstance().setActive(true, options: .notifyOthersOnDeactivation)
                        isHighlighted = false
                    } else {
                        try! AVAudioSession.sharedInstance().setActive(false, options: .notifyOthersOnDeactivation)
                        isHighlighted = true
                    }
                    callback(isHighlighted)
                }, swipeLeftAction: (() -> Swift.Void)? = {
                    if MPMusicPlayerController.systemMusicPlayer.playbackState == .playing {
                        MPMusicPlayerController.systemMusicPlayer.skipToPreviousItem()
                    }
                }, swipeRightAction: (() -> Swift.Void)? = {
                    if MPMusicPlayerController.systemMusicPlayer.playbackState == .playing {
                        MPMusicPlayerController.systemMusicPlayer.skipToNextItem()
                    }
                }, volumeIcon: UIKit.UIImage? = nil, pauseIcon: UIKit.UIImage? = nil, playIcon: UIKit.UIImage? = nil, swipeLeftIcon: UIKit.UIImage? = nil, swipeRightIcon: UIKit.UIImage? = nil)
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizerShouldBegin(_ panGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc deinit
}
public enum Style : Swift.CaseIterable {
  case selection
  case impact
  case notification
  case custom
  public static func == (a: GesturedeckiOS.Style, b: GesturedeckiOS.Style) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [GesturedeckiOS.Style]
  public static var allCases: [GesturedeckiOS.Style] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct UniHaptic {
  public init(style: GesturedeckiOS.Style = .selection)
  public func vibrate(intensity: Swift.Float = 0.7, sharpness: Swift.Float = 0.7)
}
extension GesturedeckiOS.InsomniaMode : Swift.Equatable {}
extension GesturedeckiOS.InsomniaMode : Swift.Hashable {}
extension GesturedeckiOS.Style : Swift.Equatable {}
extension GesturedeckiOS.Style : Swift.Hashable {}
